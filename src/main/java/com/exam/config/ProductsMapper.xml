<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.exam.config.ProductsMapper">

    <!-- Result Map 정의 -->
    <resultMap id="ProductsResultMap" type="com.exam.dto.ProductsDTO">
        <id property="productId" column="product_id"/>
        <result property="categoryId" column="category_id"/>
        <result property="discountId" column="discount_id"/>
        <result property="productName" column="product_name"/>
        <result property="productPrice" column="product_price"/>
        <result property="productImage" column="product_image"/>
        <result property="productDescription" column="product_description"/>
        <result property="unit" column="unit"/>
        <result property="value" column="value"/>
        <result property="productQr" column="product_qr"/>
        <result property="productCode" column="product_code"/>
        <result property="createDate" column="create_date"/>
    </resultMap>

    <!-- 상품 ID로 상품 조회 -->
    <select id="findProductById" parameterType="int" resultMap="ProductsResultMap">
        SELECT * FROM products WHERE product_id = #{productId}
    </select>

    <!-- 모든 상품 조회 -->
    <select id="findAllProducts" resultMap="ProductsResultMap">
        SELECT * FROM products
    </select>

    <!-- 상품 추가 -->
    <insert id="addProduct" parameterType="com.exam.dto.ProductsDTO" useGeneratedKeys="true" keyProperty="productId">
        INSERT INTO products (category_id, discount_id, product_name, product_price, product_image, product_description, unit, value, product_qr, product_code, create_date)
        VALUES (#{categoryId}, #{discountId}, #{productName}, #{productPrice}, #{productImage}, #{productDescription}, #{unit}, #{value}, #{productQr}, #{productCode}, #{createDate})
    </insert>

    <!-- 상품 수정 -->
    <update id="updateProduct" parameterType="com.exam.dto.ProductsDTO">
        UPDATE products
        SET category_id = #{categoryId},
            discount_id = #{discountId},
            product_name = #{productName},
            product_price = #{productPrice},
            product_image = #{productImage},
            product_description = #{productDescription},
            unit = #{unit},
            value = #{value},
            product_qr = #{productQr},
            product_code = #{productCode},
            create_date = #{createDate}
        WHERE product_id = #{productId}
    </update>

    <!-- 상품 삭제 -->
    <delete id="deleteProduct" parameterType="int">
        DELETE FROM products WHERE product_id = #{productId}
    </delete>
    
    
    
    <!-- top selling products -->
    <select id="SortProductsBySalesPrice" resultType="ProductsDTO">
        select p.product_id as productId,
           	   p.category_id as categoryId,
           	   p.discount_id as discountId,
           	   p.product_name as productName,
           	   p.product_price as productPrice,
           	   p.product_image as productImage,
           	   p.product_description as productDescription,
           	   p.unit as unit,
           	   p.value as value,
           	   p.product_qr as productQr,
           	   p.product_code as productCode,
           	   p.created_date as createdDate
        from products as p join sales as s on p.product_id = s.product_id
        group by p.product_id, p.category_id, p.discount_id, p.product_name,
             	 p.product_price, p.product_image, p.product_description,
             	 p.unit, p.value, p.product_qr, p.product_code, p.created_date
        order by coalesce(sum(s.sale_price), 0) DESC
    </select>
    
    <!-- featured pet type -->
	<select id="findProductsPetType" resultType="ProductsDTO">
    	select 
    		product_id as productId,
    		category_id as categoryId,
    		discount_id as discountId,
    		product_name as productName,
    		product_price as productPrice,
    		product_image as productImage,
    		product_description as productDescription,
    		unit as unit,
    		value as value,
    		product_qr as productQr,
    		created_date as createdDate,
    		case 
        		when left(product_code, 1) = 'D' then 'Dog'
        		when left(product_code, 1) = 'C' then 'Cat'
        		else 'All'
    		end as productCode
		from products
		order by product_price DESC
	</select>

</mapper>
